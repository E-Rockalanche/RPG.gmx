<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_globals();

var seed = string_hash(get_string("seed", ""));
random_set_seed(seed);

town_size = 48;

grid = ds_grid_create(town_size, town_size);
astar = Astar(town_size, town_size);

mx = 0;
my = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mouse

if (mouse_check_button(mb_right)) {
    view_xview = device_mouse_raw_x(0)*16;
    view_yview = device_mouse_raw_y(0)*16;
} else if (mouse_check_button_pressed(mb_left)) {
    mx = floor(mouse_x);
    my = floor(mouse_y);
} else if (mouse_check_button(mb_left)) {
    view_xview += mx - floor(mouse_x);
    view_yview += my - floor(mouse_y);
}

if (mouse_wheel_up()) {
    view_wview /= 2;
    view_hview /= 2;
} else if (mouse_wheel_down()) {
    view_wview *= 2;
    view_hview *= 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// keyboard

if (keyboard_check_pressed(ord('S'))) {
    screen_save(get_save_filename(".png", "screenshot"));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// generate town

var time = current_time;

tile_layer_delete(0);
tile_layer_delete(-1);

ds_grid_clear(grid, TownTile.GRASS);

var door_list = ds_list_create();

var forest_grid = ds_grid_create(town_size, town_size); // 0 = tree, 1 = grass
gridSeedGradient(forest_grid, 70, 0);

var house_area_size = (town_size * 2) div 3;
var house_area_offset = (town_size - house_area_size) div 2
var root_property = Rectangle(house_area_offset, house_area_offset, house_area_size, house_area_size);
var rect_list = rectangleBSP(root_property, 5, 10, 1);

ds_list_shuffle(rect_list);
var to_delete = ds_list_size(rect_list) div 2;
repeat(to_delete) {
    RectangleDestroy(ds_list_pop_back(rect_list));
}

var min_house_size = 3;
var max_house_size = 6;
for(var n = 0; n &lt; ds_list_size(rect_list); n++) {
    var rect = rect_list[| n];
    
    var min_width = min(min_house_size, RectangleWidth(rect));
    var max_width = min(max_house_size, RectangleWidth(rect));
    var house_width = irandom_range(min_width, max_width);
    
    var min_height = min(min_house_size, RectangleHeight(rect));
    var max_height = min(max_house_size, RectangleHeight(rect));
    var house_height = irandom_range(min_height, max_height);
    
    var house_left = RectangleLeft(rect) + irandom(RectangleWidth(rect) - house_width);
    var house_top = RectangleTop(rect) + irandom(RectangleHeight(rect) - house_height);
    
    for(var i = house_left; i &lt; house_left + house_width; i++) {
        for(var j = house_top; j &lt; house_top + house_height; j++) {
            grid[# i, j] = TownTile.HOUSE;
        }
    }
    
    // clear properties of any potential trees
    var clear_left = max(0, house_left-1);
    var clear_right = min(town_size-1, house_left+house_width+1);
    var clear_top = max(0, house_top-1);
    var clear_bottom = min(town_size-1, house_top+house_height+1);
    for(var i = clear_left; i &lt; clear_right; i++) {
        for(var j = clear_top; j &lt; clear_bottom; j++) {
            forest_grid[# i, j] = 2;
        }
    }
    
    // choose random position on house as door
    var door_x = house_left+ irandom(house_width - 1);
    var door_y = house_top + house_height - 1;
    grid[# door_x, door_y] = TownTile.DOOR;
    ds_list_add(door_list, Position(door_x, door_y + 1));
    
    RectangleDestroy(rect);
}
ds_list_destroy(rect_list);

for(var n = 0; n &lt; ds_list_size(door_list); n++) {
    var pos1 = door_list[| n];
    var pos2 = door_list[| (n + 1) mod ds_list_size(door_list)];
    // build path between doors
}

gridCellularAutomata(forest_grid, 8, default_birth_rules, default_survive_rules);
for(var i = 0; i &lt; town_size; i++) {
    for(var j = 0; j &lt; town_size; j++) {
        if (!forest_grid[# i, j]) {
            grid[# i, j] = TownTile.TREE;
        }
    }
}
ds_grid_destroy(forest_grid);

scr_place_town_tiles();

cout("total town time: ", current_time-time, "ms");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
